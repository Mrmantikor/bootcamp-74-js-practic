//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findSmallerNumber(numbers)
//—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
//–î–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤
//console.log(Array.isArray(0));
/*const findSmallerNumber = function(numbers){
    if(!Array.isArray(numbers)){
       return 'number is not Array'; 
    }
    let smallNumber = numbers[0];
    for(let i = 0; i < numbers.length; i++){
        if(smallNumber > numbers[i]){
            smallNumber = numbers[i];
        }
    }
    return smallNumber;
}

console.log(findSmallerNumber(0));*/

/*const findSmallerNumber = function(numbers){
    if(!Array.isArray(numbers)){
        return 'number is not Array';
    }
    let smallNumber = numbers[0];
    for(let number of numbers){
        if(typeof number !== 'number'){
            continue;
        }
        if(smallNumber > number){
            smallNumber = number;
        }
    }
    return smallNumber;
}
// .............................................................
console.log(findSmallerNumber([5,'-13',-7,-11,'a'])); */
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
// –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a, b
// –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î —á–∏—Å–ª–∞

// const compareNumbers = function (a, b) {
//   return typeof a === "number" && typeof b === "number"
//     ? Math.min(a, b)
//     : "One of parameters is not a number";
// };
// ;..........................................................................  –í–°–ï–ú –ü–†–ò–í–ï–¢ ........................................................
/*–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ç–∏—Ä–∏ —á–∏ —î —Ä–µ—á–µ–Ω–Ω—è –ø–∞–ª—ñ–Ω—Ä–æ–º*/

// const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
//—è–Ω–µ—Å—É–≥—É—Å–µ–Ω—è
// const str = '–î–µ –ø–æ–º–∏—Ç–∏ –º–æ–ø–µ–¥';
// const str = '–Ü –±—É–ª–∞ –ø–∞–Ω—ñ –Ω–∞ –ø–∞–ª—É–±–Ü';
// const str = '–ü–æ–ª—ñ–Ω–∞ –Ω–µ—Å–∏ –†–æ–º!'
// const isPalindrom = function (str) {
//   const updateSring = str.toLowerCase().replaceAll(" ", "");
//   const array = [];
//   for (let i = 0; i < updateSring.length; i++) {
//     array.push(updateSring[updateSring.length - 1 - i]);
//   }
//   let reversedString = array.join("");
//   return updateSring === reversedString;
// };
// console.log(isPalindrom(str));
// .................................................................................
//–Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å —á–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –º–∞—Å–∏–≤–∏
//–µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤–∞ —Ü–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å–∏–≤–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç—ñ
// const numbers = [11, 9, 3, 121, 33, 24, 20];
// const numbers2 = [121, 81, 9, 14641, 1089, 576, 576];

// function check(numbers, numbers2) {
//   const powNumbers = [];
//   if (numbers.length !== numbers2.length) {
//     return false;
//   }
//   for (let i = 0; i < numbers.length; i++) {
//     powNumbers.push(numbers[i] * numbers[i]);
//   }
//   for (let i = 0; i < numbers.length; i++) {
//     if (powNumbers[i] !== numbers2[i]) {
//       return false;
//     }
//   }
//   return true;
//   //   console.log(powNumbers);
// }
// function check(numbers, numbers2) {
//   if (numbers.length !== numbers2.length) {
//     return false;
//   }
//   for (let i = 0; i < numbers.length; i++) {
//     if (numbers[i] !== Math.sqrt(numbers2[i])) {
//       return false;
//     }
//   }
//   return true;
//   //   console.log(powNumbers);
// }
// console.log(check(numbers, numbers2));
// ................................................................

// –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ —Å—É–º—É–≤–∞—Ç–∏–º–µ —Å—É—Å—ñ–¥–Ω—ñ —á–∏—Å–ª–∞ —ñ –ø—É—à–∏—Ç–∏ –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
// const someArr = [22, 11, 34, 5, 12];

// function sumNeighbors(array) {
//   const sum = [];
//   for (let i = 0; i < array.length - 1; i++) {
//     console.log("first", array[i]);
//     console.log("second", array[i + 1]);
//     console.log("---");
//     sum.push(array[i] + array[i + 1]);
//   }
//   return sum;
// }

// console.log(sumNeighbors(someArr));

// const someArr = [22, 11, 34, 5, 12];

// function sumNeighbors(array) {
//   const sum = [];
//   for (let i = 0; i < array.length; i += 2) {
//     console.log("first", array[i]);
//     console.log("second", array[i + 1] || 0);
//     console.log("---");
//     sum.push(array[i] + (array[i + 1] || 0));
//   }
//   return sum;
// }

// console.log(sumNeighbors(someArr));

/* 
TODO: 
–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calculateAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ü–µ —á–∏—Å–ª–∞.

function calculateAverage() {
    
    let sum = 0;
    let count = 0;
    for (let i = 0; i < arguments.length; i++) {
        if ('number' === typeof arguments[i]) {
            sum += arguments[i];  count++;
        }
    }
    console.log(sum/count);
}
console.log(calculateAverage('str', 1 , 2, 3, 4, 5, 6, 7));
*/

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç. –Ø–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å, –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ, —è–∫—â–æ –Ω—ñ - –¥–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É.
// const wordsArray = ["JavaScript", "HTML", "CSS"];
// const item = "SS";

// function foundElement(array, item) {
//     let includes = false;
//     for (let i = 0; i < array.length; i++) {
//       console.log(array);
//         if (array[i] === item) {
//             array.splice(i, 1);
//             includes = true;
//         }
//   }
//     if (includes === false) {
//         array.push(item);
//     }
//     return array;
// }

// function foundElement(array, item) {
//     const index = array.indexOf(item)
//     if (index === -1) {
//         array.push(item)
//     } else {
//         array.splice(index, 1);
//     }
//     return array;
// }

// console.log(foundElement(wordsArray, item));

//–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–π—Ç–µ –º–∞—Å–∏–≤ —â–æ–± –±—É–ª–∏ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ñ—Ä—É–∫—Ç—ã

// const fruits = [
//   "üçé",
//   "üçá",
//   "üçé",
//   "üçá",
//   "üçë",
//   "üçå",
//   "üçã",
//   "üçé",
//   "üçá",
//   "üçë",
//   "üçå",
//   "üçã",
//   "üçë",
//   "üçå",
//   "üçã",
// ];
// function getUnqFtuits(arr) {
//   const newArray = [];
//   for (let i = 0; i < arr.length; i++) {
//     if (!newArray.includes(arr[i])) {
//       newArray.push(arr[i]);
//     }
//   }
//   console.log(newArray);
// }
// function getUnqFtuits(arr) {
//   const newArray = [];
//   for (let i = 0; i < arr.length; i++) {
//     if (i === arr.indexOf(arr[i])) {
//       newArray.push(arr[i]);
//     }
//   }
//   console.log(newArray);
// }
// getUnqFtuits(fruits);

// –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É, —â–æ –º—ñ—Å—Ç—è—Ç—å –∑–∞–¥–∞–Ω—É –ø—ñ–¥—Å—Ç—Ä–æ–∫—É,
//  —Ç–∞ –æ–±'—î–¥–Ω–∞—Ç–∏ —ó—Ö —É –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–∏–≤–µ—Å—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
// "–ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É substring: ..." –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –∫–æ–º–∞–º–∏
// —Ç–∞ –ø—Ä–æ–±—ñ–ª–∞–º–∏.(–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ indexOf)

// const wordsArray = ["JavaScript", "HTML", "CSS", "React"];
// const substring = "S";
// const newArray = [];
// for (let word of wordsArray) {
//   if (word.includes(substring)) {
//     newArray.push(word);
//   }
// }
// console.log(
//   `–ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É ${substring}: ${newArray.join(". ")}`
// );
